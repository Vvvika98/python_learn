''' Строки поддерживают все общие операции с последовательностями. Отдельные кодовые точки можно перебирать в цикле, используя for item in <str>.
Индексы с элементами можно перебирать в цикле, используя for index, item in enumerate(<str>).
Разберем по частям:
*   Strings support all common sequence operations: Строки в Python являются последовательностями, как и списки и кортежи.  
Это означает, что вы можете использовать множество операций, которые работают с последовательностями, например:
*   len(<str>):  Возвращает длину строки (количество символов).
*   <str>[index]:  Получение символа по индексу.
*   <str>[start:stop:step]:  Срезы.
*   in:  Проверка наличия подстроки в строке.
*   +:  Конкатенация строк.
  *   *:  Повторение строки.
*   Individual code points can be iterated through in a loop via for item in <str>: Этот способ позволяет перебрать каждый символ строки по очереди.  
Переменная item будет принимать значение каждого символа в строке.
*   Indexes with items can be iterated through in a loop via for index, item in enumerate(<str>): 
Функция enumerate() позволяет перебирать строку, получая одновременно индекс и значение каждого символа.  Переменная index будет содержать индекс текущего символа, а переменная item - сам символ.
'''
my_string = "Python"

# Перебор символов строки
for char in my_string:
    print(char)

# Перебор символов с индексами
for index, char in enumerate(my_string):
    print(f"Индекс: {index}, Символ: {char}")

# Проверка наличия подстроки
if "th" in my_string:
    print("Подстрока 'th' найдена в строке")

# Длина строки
length = len(my_string)
print(f"Длина строки: {length}")


''' В итоге:  Python предоставляет удобные способы для работы со строками как с последовательностями. 
Вы можете легко перебирать символы строки и получать их индексы, а также использовать другие стандартные операции для работы с последовательностями. 
Функция enumerate() особенно полезна, когда вам нужен как индекс, так и значение элемента.
'''